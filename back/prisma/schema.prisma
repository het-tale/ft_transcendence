generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email              String  @unique
  IsEmailConfirmed   Boolean @default(false)
  username           String? @unique
  hash               String?
  avatar             String
  login              String? @unique
  isPasswordRequired Boolean @default(false)
  is2faEnabled       Boolean @default(false)
  twofaSecret        String?
  is2faVerified      Boolean @default(false)

  friend User? @relation("FriendList", fields: [userId], references: [id])
  userId Int?

  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  friends          User[]        @relation("FriendList")
  matchHistoryA    Match[]       @relation("MatchPlayerA")
  matchHistoryB    Match[]       @relation("MatchPlayerB")
  winningmatches   Match[]       @relation("MatchWinner")
  achievements     Achievement[] @relation("Achiever")
  channels         Channel[]     @relation("ChannelParticipants")
  ownedChannels    Channel[]     @relation("ChannelOwner")
}

model Match {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start  DateTime
  end    DateTime
  result String

  playerA   User? @relation("MatchPlayerA", fields: [playerAId], references: [id])
  playerAId Int?
  playerB   User? @relation("MatchPlayerB", fields: [playerBId], references: [id])
  playerBId Int?
  winner    User? @relation("MatchWinner", fields: [winnerId], references: [id])
  winnerId  Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  sentAt  DateTime

  isDM Boolean @default(true)

  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int?
  channel    Channel? @relation("ChannelMessages", fields: [channelId], references: [id])
  channelId  Int?
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type   Boolean @default(true)
  hash   String?
  owner  User    @relation("ChannelOwner", fields: [userId], references: [id])
  userId Int

  messages     Message[] @relation("ChannelMessages")
  participants User[]    @relation("ChannelParticipants")
}

model Achievement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  icon        String
  description String

  achievers User[] @relation("Achiever")
}
